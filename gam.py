# -*- coding: utf-8 -*-
"""GAM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1niCcCY393yOI_4SOQHOPIPsrwZk1JUtu

#data preprocessing
"""

import pandas as  pd
import numpy as np

data = pd.read_csv('Life Expectancy Data.csv')
data.head()

data.info()

"""so we have null entries"""

data.dropna()

100-1649/2938*100

"""Removing all incomplete rows would lead to losing 44% of the data. So, we only drop the rows corresponding to null under our target column 'Life expectancy '."""

#dropping rows with null in target
data = pd.read_csv('Life Expectancy Data.csv')
index=[]
for i in range(len(data)):
  if(data['Life expectancy '].isnull()[i]==True):
    index.append(i)
data.drop(index,inplace=True)
data.index=range(len(data))
data.info()

"""We still have missing entries in the independent variable columns. """

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(data.iloc[:,3:])
data.iloc[:,3:]= imputer.transform(data.iloc[:,3:])
data.info()

"""We filled the missing data by the mean of the corresponding columns."""

#sorting data in increasing order of Life expectancy
data.sort_values(by=['Life expectancy '], inplace=True)
data.index=np.arange(0,len(data),1)

data.head(10)

"""#data visualisation"""

import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D

plt.style.use('seaborn-whitegrid')

sns.pairplot(data,hue='Status')

"""Looking at the scatter plot, as expected, we find the Life expectancy is higher in developed countries indicated by yellow. We find some pattern or relationship of Life expectancy only with Adult mortality, Percentage expenditure, BMI, HIV/AIDS, GDP, income composition of resources and Schooling. Also there is high correlation between the last two , Adult mortality and HIV/AIDS, and percentage expenditure and GDP."""

correlation = data.corr()
fig, axes  = plt.subplots(figsize=(20,16))
sns.heatmap(correlation,annot=True,vmin=-1,vmax=1,center=0,ax=axes)

fig = plt.gcf()

# Change seaborn plot size
fig.set_size_inches(12, 8)

sns.boxplot(x='Year',
            y='Life expectancy ',
            data=data);

fig = plt.gcf()

# Change seaborn plot size
fig.set_size_inches(12, 8)

sns.boxplot(x='Status',
            y='Life expectancy ',
            hue='Year',
            data=data);

sns.boxplot(x='Status',
            y='Life expectancy ',
            data=data);

"""Note the linear increase in the Life Expectancy with Year and the upper quartile of Life expectancy of Developing is less than the lower quartile of Life expectancy of Developed."""

fig = plt.gcf()

# Change seaborn plot size
fig.set_size_inches(12, 20)
plt.axvline(data['Life expectancy '].mean(),
           linestyle=':')
sns.scatterplot(x='Life expectancy ',
                y='Country',
                hue='Status',
                data=data)

"""Life expectancy is overall higher in Developed countries than in Developing

The 'percentage expenditure' coloumn represents the Expenditure on health as a percentage of Gross Domestic Product per capita(%) 
So, the product of 'percentage expenditure' and 'GDP' should be a more meaningful factor than 'percentage expenditure' itself
"""

#adding a new column for the expenditure on health
data['expenditure']=data['percentage expenditure']*data['GDP']

fig=plt.gcf()
fig.set_size_inches(10,10)
sns.scatterplot(x='expenditure',
            y='Life expectancy ',
            data=data);

"""This doesn't look very impressive."""

X=data.drop('Life expectancy ',axis=1)
fig,axs=plt.subplots(nrows=len(X.columns)-3,ncols=1,figsize=(10,100))
i=0
while (i<len(X.columns)-3):
  axs[i].scatter(x=data[X.columns[i+3]],
                y=data['Life expectancy '])
  axs[i].set(xlabel=str(i+3)+' '+X.columns[i+3],
             ylabel='Life expectancy ')
  i+=1

"""#encoding categorical variables"""

len(set(data.Country))

set(data.Status)

"""So, we have two categorical variables namely Country and Status. We can encode Status with binary values as we only have two status: {'Developed', 'Developing'}, so order doesn't matter but encoding 183 different Country names using label encoder is not very meaningful. """

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data["Status"] = le.fit_transform(data["Status"])
data

data.Status.dtype

"""we encoded 'Developing' as 1 and 'Developed' as 0"""

le = LabelEncoder()
data['Country'] = le.fit_transform(data['Country'])
data

"""# Splitting the dataset into the Training set and Test set"""

y=data['Life expectancy ']
X=np.array(data.drop('Life expectancy ',
               axis = 1))

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

"""# Feature Scaling"""

data.describe()

"""Except for Country, Year and Status, which are categorical variables, the other features need to be scaled due to vast differences in their variations."""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[:, 3:] = sc.fit_transform(X_train[:, 3:])
X_test[:, 3:] = sc.transform(X_test[:, 3:])

"""#distribution of y"""

sns.histplot(x='Life expectancy ',
             data=data,
             kde=True);

sns.histplot(x='Life expectancy ',
             data=data,
             hue='Status',
             kde=True);

sns.kdeplot(x='Life expectancy ',
             data=data,
             hue='Year');

"""y or Life expectancy has a continuous distribution approximated by the above curves. It is negetively skewed."""

from scipy.stats import boxcox 
#perform Box-Cox transformation on original data
transformed_data, best_lambda = boxcox(y) 

#plot the distribution of the transformed data values
sns.distplot(transformed_data, hist=False, kde=True);

from scipy.stats import shapiro

#perform Shapiro-Wilk test
shapiro(y)

from scipy.stats import shapiro

#perform Shapiro-Wilk test
shapiro(transformed_data)

"""The p-values in each case is very small indicating we should reject the null hypothesis of Normal Distribution. So data is not normal even after transformation.

#GAM
"""

!pip install PYGAM
from pygam import *

titles_all=data.drop('Life expectancy ',axis=1).columns
titles_all

def plot_splines(gam,n,titles):
    fig, axes = plt.subplots(nrows=n, figsize=(4,45))
    axes = np.array(axes).flatten()
    for i, (ax, title, p_value) in enumerate(zip(axes, titles, gam.statistics_['p_values'])):
        XX = gam.generate_X_grid(term=i)
        ax.plot(XX[:, i], gam.partial_dependence(term=i, X=XX))
        ax.plot(XX[:, i], gam.partial_dependence(term=i, X=XX, width=.95)[1], c='r', ls='--')
        ax.set_title("{0:} (p={1:.2})".format(title, p_value))
        ax.set_yticks([])

"""##linear gam"""

linear_gam_1=LinearGAM(f(0)+l(1)+f(2)+s(3)+s(4)+s(5)+s(6)+s(7)+s(8)+s(9)+s(10)+s(11)+s(12)+s(13)+s(14)+s(15)+s(16)+s(17)+s(18)+s(19)+s(20)+s(21)).fit(X_train,y_train)

plot_splines(linear_gam_1,22,titles_all)

linear_gam_1.summary()

"""6,8,11,12,15,16,18,21 not significant"""

titles_all[[6,8,11,12,15,16,18,21]]

plt.plot(y_test, linear_gam_1.predict(X_test),"*")
plt.ylabel("Predicted Value")
plt.xlabel("Actual value")

"""This looks nice. Our regressor has worked well!

##Gamma gam

We know Gamma distribution is positively skewed. We expect 100 - Life expectancy to have a Gamma distrubution.
"""

gamma_gam_1=GammaGAM(f(0)+l(1)+f(2)+s(3)+s(4)+s(5)+s(6)+s(7)+s(8)+s(9)+s(10)+s(11)+s(12)+s(13)+s(14)+s(15)+s(16)+s(17)+s(18)+s(19)+s(20)+s(21)).fit(X_train,100-y_train)

plot_splines(gamma_gam_1,22,titles_all)

gamma_gam_1.summary()

"""This model performs well and has less AIC value but the Linear GAM has more R square value. However the values are quiet comparable."""

plt.plot(100-y_test, gamma_gam_1.predict(X_test),"*")
plt.ylabel("Predicted Value")
plt.xlabel("Actual value")

"""# concluding remarks"""

titles=titles_all[[0,3,4,9,10,14,19,2,1,20,13,21,17,5,15,7]]
titles

"""We find that GAM is a very useful tool.
In decreasing order of significance, here is the list of factors affecting Life Expectancy:
'Country', 'Adult Mortality', 'infant deaths', ' BMI ',
       'under-five deaths ', ' HIV/AIDS', 'Income composition of resources',
       'Status', 'Year', 'Schooling', 'Diphtheria ', 'expenditure',
       ' thinness  1-19 years', 'Alcohol', 'GDP', 'Hepatitis B'
"""